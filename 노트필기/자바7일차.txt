[ 추상클래스와 인터페이스 ]

▶ 추상클래스
- 의미: 불완전한 클래스
- 정의하는 법: 추상메서드를 단 하나라도 두면 추상클래스가 된다
- 사용이유: 자식 클래스에게 구현을 강제하기 위함
- 한계: 다중상속불허 원칙 때문에 복합적인 객체를 표현하는데 제한이 있다

▶ 인터페이스
- 의미: 클래스가 아닌 추상메서드만으로 이루어진 객체 (기능만을 모아놓은 객체)
	ex) 천사 자체가 아닌 천사가 보유한 날개
- 정의하는 법: 인터페이스는 추상메서드만 100% 가지고 있으므로 abstract를 붙이지 않는다
- 구성요소: 상수와 추상메서드만을 갖는다

▶ 추상클래스와 인터페이스의 주요 활용
- is a 관계 성립
	ex) 스마트폰
	class SmartPhone extends Phone implements GameMachine, TV, Computer, MP3{
	}
	SmartPhone is a Phone is a GameMachine, TV, Computer, MP3
	결론: 현실에서의 다중상속을 인터페이스를 통해 구현한 것

▶ 수식자의 유형
- static
- final :
	클래스: 상속 불허(대가 끊김)
	메서드: 오버라이딩 불허
	변수: 값 변경 불허 (상수 X)
- abstract

▶ 상수의 요건
- 값이 변경되면 안됨(final) + 모든 인스턴스간 값이 공유되어야 함(static) + 접근 제한이 없어야 함(public)
- 기존  -->  final int x=6; (지역변수 사용 가능)
- 상수  -->  public static final X=6 (상수는 대문자로 표기하며 멤버변수에 위치)

[ String 클래스 ]
String에 의해 생성된 문자열을 변경이 불가능하므로 "문자열 상수"라는 용어를 사용
생성된 스트링 객체는 immutable(변경불가) 하다

- 많이 쓰는 자료형이므로 마치 기본 자료형인 것처럼 메모리에 올리는 법을 자바에서 지원
	ex) String s="apple";  <--  마치 기본 자료형 올리듯
	이와 같은 선언 방식을 가리켜 암시적, 묵시적 생성법 상수풀

- 상수풀(Constant Pool): 중복된 문자열 객체를 생성하지 않는다. 따라서 묵시적 생성법으로 생성되는
				  문자열 객체가 중복되지 않도록 처리해준다

- 메모리 효율성
 묵시적: String s = "korea";
 명시적: String s = new String("korea");

- 스트링 객체간의 == 연산자 사용은 내용일까 주소값일까

s1==s2  <-- 결론: String은 객체이므로 주소값 비교가 된다
		    암시적 생성법: 상수풀의 같은 객체의 주소
		    (그러다 보니 내용 비교한 것과 같은 결과가 나오는 것 뿐)

		    명시적 생성법: 힙의 서로 다른 주소값


[ GUI 프로그래밍 ]
cmd를 통해 개발을 진행하면 직관성이 떨어지며 사용자에게 불친절하고 재미가 없다

윈도우 기반이며 모든 그래픽 처리가 윈도우 안에 그려진다
따라서 GUI 프로그래밍을 '윈도우 프로그래밍'이라고도 한다
